{"ast":null,"code":"import * as cookie from 'cookie';\nexport function hasDocumentCookie() {\n  // Can we get/set cookies on document.cookie?\n  return typeof document === 'object' && typeof document.cookie === 'string';\n}\nexport function cleanCookies() {\n  document.cookie.split(';').forEach(function (c) {\n    document.cookie = c.replace(/^ +/, '').replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');\n  });\n}\nexport function parseCookies(cookies) {\n  if (typeof cookies === 'string') {\n    return cookie.parse(cookies);\n  } else if (typeof cookies === 'object' && cookies !== null) {\n    return cookies;\n  } else {\n    return {};\n  }\n}\nexport function readCookie(value) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const cleanValue = cleanupCookieValue(value);\n\n  if (!options.doNotParse) {\n    try {\n      return JSON.parse(cleanValue);\n    } catch (e) {// At least we tried\n    }\n  } // Ignore clean value if we failed the deserialization\n  // It is not relevant anymore to trim those values\n\n\n  return value;\n}\n\nfunction cleanupCookieValue(value) {\n  // express prepend j: before serializing a cookie\n  if (value && value[0] === 'j' && value[1] === ':') {\n    return value.substr(2);\n  }\n\n  return value;\n}","map":{"version":3,"sources":["/Users/xiuhuiwang/Documents/USF/CS686_CloudComputing/final/mld/node_modules/universal-cookie/es6/utils.js"],"names":["cookie","hasDocumentCookie","document","cleanCookies","split","forEach","c","replace","Date","toUTCString","parseCookies","cookies","parse","readCookie","value","options","cleanValue","cleanupCookieValue","doNotParse","JSON","e","substr"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,OAAO,SAASC,iBAAT,GAA6B;AAChC;AACA,SAAO,OAAOC,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAQ,CAACF,MAAhB,KAA2B,QAAlE;AACH;AACD,OAAO,SAASG,YAAT,GAAwB;AAC3BD,EAAAA,QAAQ,CAACF,MAAT,CAAgBI,KAAhB,CAAsB,GAAtB,EAA2BC,OAA3B,CAAmC,UAAUC,CAAV,EAAa;AAC5CJ,IAAAA,QAAQ,CAACF,MAAT,GAAkBM,CAAC,CACdC,OADa,CACL,KADK,EACE,EADF,EAEbA,OAFa,CAEL,KAFK,EAEE,eAAe,IAAIC,IAAJ,GAAWC,WAAX,EAAf,GAA0C,SAF5C,CAAlB;AAGH,GAJD;AAKH;AACD,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;AAClC,MAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,WAAOX,MAAM,CAACY,KAAP,CAAaD,OAAb,CAAP;AACH,GAFD,MAGK,IAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EAAqD;AACtD,WAAOA,OAAP;AACH,GAFI,MAGA;AACD,WAAO,EAAP;AACH;AACJ;AACD,OAAO,SAASE,UAAT,CAAoBC,KAApB,EAAyC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC5C,QAAMC,UAAU,GAAGC,kBAAkB,CAACH,KAAD,CAArC;;AACA,MAAI,CAACC,OAAO,CAACG,UAAb,EAAyB;AACrB,QAAI;AACA,aAAOC,IAAI,CAACP,KAAL,CAAWI,UAAX,CAAP;AACH,KAFD,CAGA,OAAOI,CAAP,EAAU,CACN;AACH;AACJ,GAT2C,CAU5C;AACA;;;AACA,SAAON,KAAP;AACH;;AACD,SAASG,kBAAT,CAA4BH,KAA5B,EAAmC;AAC/B;AACA,MAAIA,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAtB,IAA6BA,KAAK,CAAC,CAAD,CAAL,KAAa,GAA9C,EAAmD;AAC/C,WAAOA,KAAK,CAACO,MAAN,CAAa,CAAb,CAAP;AACH;;AACD,SAAOP,KAAP;AACH","sourcesContent":["import * as cookie from 'cookie';\nexport function hasDocumentCookie() {\n    // Can we get/set cookies on document.cookie?\n    return typeof document === 'object' && typeof document.cookie === 'string';\n}\nexport function cleanCookies() {\n    document.cookie.split(';').forEach(function (c) {\n        document.cookie = c\n            .replace(/^ +/, '')\n            .replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');\n    });\n}\nexport function parseCookies(cookies) {\n    if (typeof cookies === 'string') {\n        return cookie.parse(cookies);\n    }\n    else if (typeof cookies === 'object' && cookies !== null) {\n        return cookies;\n    }\n    else {\n        return {};\n    }\n}\nexport function readCookie(value, options = {}) {\n    const cleanValue = cleanupCookieValue(value);\n    if (!options.doNotParse) {\n        try {\n            return JSON.parse(cleanValue);\n        }\n        catch (e) {\n            // At least we tried\n        }\n    }\n    // Ignore clean value if we failed the deserialization\n    // It is not relevant anymore to trim those values\n    return value;\n}\nfunction cleanupCookieValue(value) {\n    // express prepend j: before serializing a cookie\n    if (value && value[0] === 'j' && value[1] === ':') {\n        return value.substr(2);\n    }\n    return value;\n}\n"]},"metadata":{},"sourceType":"module"}