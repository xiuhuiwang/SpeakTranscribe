{"ast":null,"code":"const parse = require('./parse.js');\n\nconst diff = (version1, version2) => {\n  const v1 = parse(version1, null, true);\n  const v2 = parse(version2, null, true);\n  const comparison = v1.compare(v2);\n\n  if (comparison === 0) {\n    return null;\n  }\n\n  const v1Higher = comparison > 0;\n  const highVersion = v1Higher ? v1 : v2;\n  const lowVersion = v1Higher ? v2 : v1;\n  const highHasPre = !!highVersion.prerelease.length;\n  const lowHasPre = !!lowVersion.prerelease.length;\n\n  if (lowHasPre && !highHasPre) {\n    // Going from prerelease -> no prerelease requires some special casing\n    // If the low version has only a major, then it will always be a major\n    // Some examples:\n    // 1.0.0-1 -> 1.0.0\n    // 1.0.0-1 -> 1.1.1\n    // 1.0.0-1 -> 2.0.0\n    if (!lowVersion.patch && !lowVersion.minor) {\n      return 'major';\n    } // Otherwise it can be determined by checking the high version\n\n\n    if (highVersion.patch) {\n      // anything higher than a patch bump would result in the wrong version\n      return 'patch';\n    }\n\n    if (highVersion.minor) {\n      // anything higher than a minor bump would result in the wrong version\n      return 'minor';\n    } // bumping major/minor/patch all have same result\n\n\n    return 'major';\n  } // add the `pre` prefix if we are going to a prerelease version\n\n\n  const prefix = highHasPre ? 'pre' : '';\n\n  if (v1.major !== v2.major) {\n    return prefix + 'major';\n  }\n\n  if (v1.minor !== v2.minor) {\n    return prefix + 'minor';\n  }\n\n  if (v1.patch !== v2.patch) {\n    return prefix + 'patch';\n  } // high and low are preleases\n\n\n  return 'prerelease';\n};\n\nmodule.exports = diff;","map":{"version":3,"sources":["/Users/xiuhuiwang/Documents/USF/CS686_CloudComputing/final/mld/node_modules/semver/functions/diff.js"],"names":["parse","require","diff","version1","version2","v1","v2","comparison","compare","v1Higher","highVersion","lowVersion","highHasPre","prerelease","length","lowHasPre","patch","minor","prefix","major","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AAEA,MAAMC,IAAI,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACnC,QAAMC,EAAE,GAAGL,KAAK,CAACG,QAAD,EAAW,IAAX,EAAiB,IAAjB,CAAhB;AACA,QAAMG,EAAE,GAAGN,KAAK,CAACI,QAAD,EAAW,IAAX,EAAiB,IAAjB,CAAhB;AACA,QAAMG,UAAU,GAAGF,EAAE,CAACG,OAAH,CAAWF,EAAX,CAAnB;;AAEA,MAAIC,UAAU,KAAK,CAAnB,EAAsB;AACpB,WAAO,IAAP;AACD;;AAED,QAAME,QAAQ,GAAGF,UAAU,GAAG,CAA9B;AACA,QAAMG,WAAW,GAAGD,QAAQ,GAAGJ,EAAH,GAAQC,EAApC;AACA,QAAMK,UAAU,GAAGF,QAAQ,GAAGH,EAAH,GAAQD,EAAnC;AACA,QAAMO,UAAU,GAAG,CAAC,CAACF,WAAW,CAACG,UAAZ,CAAuBC,MAA5C;AACA,QAAMC,SAAS,GAAG,CAAC,CAACJ,UAAU,CAACE,UAAX,CAAsBC,MAA1C;;AAEA,MAAIC,SAAS,IAAI,CAACH,UAAlB,EAA8B;AAC5B;AAEA;AACA;AACA;AACA;AACA;AACA,QAAI,CAACD,UAAU,CAACK,KAAZ,IAAqB,CAACL,UAAU,CAACM,KAArC,EAA4C;AAC1C,aAAO,OAAP;AACD,KAV2B,CAY5B;;;AAEA,QAAIP,WAAW,CAACM,KAAhB,EAAuB;AACrB;AACA,aAAO,OAAP;AACD;;AAED,QAAIN,WAAW,CAACO,KAAhB,EAAuB;AACrB;AACA,aAAO,OAAP;AACD,KAtB2B,CAwB5B;;;AACA,WAAO,OAAP;AACD,GAzCkC,CA2CnC;;;AACA,QAAMC,MAAM,GAAGN,UAAU,GAAG,KAAH,GAAW,EAApC;;AAEA,MAAIP,EAAE,CAACc,KAAH,KAAab,EAAE,CAACa,KAApB,EAA2B;AACzB,WAAOD,MAAM,GAAG,OAAhB;AACD;;AAED,MAAIb,EAAE,CAACY,KAAH,KAAaX,EAAE,CAACW,KAApB,EAA2B;AACzB,WAAOC,MAAM,GAAG,OAAhB;AACD;;AAED,MAAIb,EAAE,CAACW,KAAH,KAAaV,EAAE,CAACU,KAApB,EAA2B;AACzB,WAAOE,MAAM,GAAG,OAAhB;AACD,GAxDkC,CA0DnC;;;AACA,SAAO,YAAP;AACD,CA5DD;;AA8DAE,MAAM,CAACC,OAAP,GAAiBnB,IAAjB","sourcesContent":["const parse = require('./parse.js')\n\nconst diff = (version1, version2) => {\n  const v1 = parse(version1, null, true)\n  const v2 = parse(version2, null, true)\n  const comparison = v1.compare(v2)\n\n  if (comparison === 0) {\n    return null\n  }\n\n  const v1Higher = comparison > 0\n  const highVersion = v1Higher ? v1 : v2\n  const lowVersion = v1Higher ? v2 : v1\n  const highHasPre = !!highVersion.prerelease.length\n  const lowHasPre = !!lowVersion.prerelease.length\n\n  if (lowHasPre && !highHasPre) {\n    // Going from prerelease -> no prerelease requires some special casing\n\n    // If the low version has only a major, then it will always be a major\n    // Some examples:\n    // 1.0.0-1 -> 1.0.0\n    // 1.0.0-1 -> 1.1.1\n    // 1.0.0-1 -> 2.0.0\n    if (!lowVersion.patch && !lowVersion.minor) {\n      return 'major'\n    }\n\n    // Otherwise it can be determined by checking the high version\n\n    if (highVersion.patch) {\n      // anything higher than a patch bump would result in the wrong version\n      return 'patch'\n    }\n\n    if (highVersion.minor) {\n      // anything higher than a minor bump would result in the wrong version\n      return 'minor'\n    }\n\n    // bumping major/minor/patch all have same result\n    return 'major'\n  }\n\n  // add the `pre` prefix if we are going to a prerelease version\n  const prefix = highHasPre ? 'pre' : ''\n\n  if (v1.major !== v2.major) {\n    return prefix + 'major'\n  }\n\n  if (v1.minor !== v2.minor) {\n    return prefix + 'minor'\n  }\n\n  if (v1.patch !== v2.patch) {\n    return prefix + 'patch'\n  }\n\n  // high and low are preleases\n  return 'prerelease'\n}\n\nmodule.exports = diff\n"]},"metadata":{},"sourceType":"script"}