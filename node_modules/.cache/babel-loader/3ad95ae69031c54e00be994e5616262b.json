{"ast":null,"code":"const debug = require('../internal/debug');\n\nconst {\n  MAX_LENGTH,\n  MAX_SAFE_INTEGER\n} = require('../internal/constants');\n\nconst {\n  safeRe: re,\n  t\n} = require('../internal/re');\n\nconst parseOptions = require('../internal/parse-options');\n\nconst {\n  compareIdentifiers\n} = require('../internal/identifiers');\n\nclass SemVer {\n  constructor(version, options) {\n    options = parseOptions(options);\n\n    if (version instanceof SemVer) {\n      if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {\n        return version;\n      } else {\n        version = version.version;\n      }\n    } else if (typeof version !== 'string') {\n      throw new TypeError(`Invalid version. Must be a string. Got type \"${typeof version}\".`);\n    }\n\n    if (version.length > MAX_LENGTH) {\n      throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);\n    }\n\n    debug('SemVer', version, options);\n    this.options = options;\n    this.loose = !!options.loose; // this isn't actually relevant for versions, but keep it so that we\n    // don't run into trouble passing this.options around.\n\n    this.includePrerelease = !!options.includePrerelease;\n    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);\n\n    if (!m) {\n      throw new TypeError(`Invalid Version: ${version}`);\n    }\n\n    this.raw = version; // these are actually numbers\n\n    this.major = +m[1];\n    this.minor = +m[2];\n    this.patch = +m[3];\n\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n      throw new TypeError('Invalid major version');\n    }\n\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n      throw new TypeError('Invalid minor version');\n    }\n\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n      throw new TypeError('Invalid patch version');\n    } // numberify any prerelease numeric ids\n\n\n    if (!m[4]) {\n      this.prerelease = [];\n    } else {\n      this.prerelease = m[4].split('.').map(id => {\n        if (/^[0-9]+$/.test(id)) {\n          const num = +id;\n\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\n            return num;\n          }\n        }\n\n        return id;\n      });\n    }\n\n    this.build = m[5] ? m[5].split('.') : [];\n    this.format();\n  }\n\n  format() {\n    this.version = `${this.major}.${this.minor}.${this.patch}`;\n\n    if (this.prerelease.length) {\n      this.version += `-${this.prerelease.join('.')}`;\n    }\n\n    return this.version;\n  }\n\n  toString() {\n    return this.version;\n  }\n\n  compare(other) {\n    debug('SemVer.compare', this.version, this.options, other);\n\n    if (!(other instanceof SemVer)) {\n      if (typeof other === 'string' && other === this.version) {\n        return 0;\n      }\n\n      other = new SemVer(other, this.options);\n    }\n\n    if (other.version === this.version) {\n      return 0;\n    }\n\n    return this.compareMain(other) || this.comparePre(other);\n  }\n\n  compareMain(other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options);\n    }\n\n    return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);\n  }\n\n  comparePre(other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options);\n    } // NOT having a prerelease is > having one\n\n\n    if (this.prerelease.length && !other.prerelease.length) {\n      return -1;\n    } else if (!this.prerelease.length && other.prerelease.length) {\n      return 1;\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n      return 0;\n    }\n\n    let i = 0;\n\n    do {\n      const a = this.prerelease[i];\n      const b = other.prerelease[i];\n      debug('prerelease compare', i, a, b);\n\n      if (a === undefined && b === undefined) {\n        return 0;\n      } else if (b === undefined) {\n        return 1;\n      } else if (a === undefined) {\n        return -1;\n      } else if (a === b) {\n        continue;\n      } else {\n        return compareIdentifiers(a, b);\n      }\n    } while (++i);\n  }\n\n  compareBuild(other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options);\n    }\n\n    let i = 0;\n\n    do {\n      const a = this.build[i];\n      const b = other.build[i];\n      debug('prerelease compare', i, a, b);\n\n      if (a === undefined && b === undefined) {\n        return 0;\n      } else if (b === undefined) {\n        return 1;\n      } else if (a === undefined) {\n        return -1;\n      } else if (a === b) {\n        continue;\n      } else {\n        return compareIdentifiers(a, b);\n      }\n    } while (++i);\n  } // preminor will bump the version up to the next minor release, and immediately\n  // down to pre-release. premajor and prepatch work the same way.\n\n\n  inc(release, identifier, identifierBase) {\n    switch (release) {\n      case 'premajor':\n        this.prerelease.length = 0;\n        this.patch = 0;\n        this.minor = 0;\n        this.major++;\n        this.inc('pre', identifier, identifierBase);\n        break;\n\n      case 'preminor':\n        this.prerelease.length = 0;\n        this.patch = 0;\n        this.minor++;\n        this.inc('pre', identifier, identifierBase);\n        break;\n\n      case 'prepatch':\n        // If this is already a prerelease, it will bump to the next version\n        // drop any prereleases that might already exist, since they are not\n        // relevant at this point.\n        this.prerelease.length = 0;\n        this.inc('patch', identifier, identifierBase);\n        this.inc('pre', identifier, identifierBase);\n        break;\n      // If the input is a non-prerelease version, this acts the same as\n      // prepatch.\n\n      case 'prerelease':\n        if (this.prerelease.length === 0) {\n          this.inc('patch', identifier, identifierBase);\n        }\n\n        this.inc('pre', identifier, identifierBase);\n        break;\n\n      case 'major':\n        // If this is a pre-major version, bump up to the same major version.\n        // Otherwise increment major.\n        // 1.0.0-5 bumps to 1.0.0\n        // 1.1.0 bumps to 2.0.0\n        if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {\n          this.major++;\n        }\n\n        this.minor = 0;\n        this.patch = 0;\n        this.prerelease = [];\n        break;\n\n      case 'minor':\n        // If this is a pre-minor version, bump up to the same minor version.\n        // Otherwise increment minor.\n        // 1.2.0-5 bumps to 1.2.0\n        // 1.2.1 bumps to 1.3.0\n        if (this.patch !== 0 || this.prerelease.length === 0) {\n          this.minor++;\n        }\n\n        this.patch = 0;\n        this.prerelease = [];\n        break;\n\n      case 'patch':\n        // If this is not a pre-release version, it will increment the patch.\n        // If it is a pre-release it will bump up to the same patch version.\n        // 1.2.0-5 patches to 1.2.0\n        // 1.2.0 patches to 1.2.1\n        if (this.prerelease.length === 0) {\n          this.patch++;\n        }\n\n        this.prerelease = [];\n        break;\n      // This probably shouldn't be used publicly.\n      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\n\n      case 'pre':\n        {\n          const base = Number(identifierBase) ? 1 : 0;\n\n          if (!identifier && identifierBase === false) {\n            throw new Error('invalid increment argument: identifier is empty');\n          }\n\n          if (this.prerelease.length === 0) {\n            this.prerelease = [base];\n          } else {\n            let i = this.prerelease.length;\n\n            while (--i >= 0) {\n              if (typeof this.prerelease[i] === 'number') {\n                this.prerelease[i]++;\n                i = -2;\n              }\n            }\n\n            if (i === -1) {\n              // didn't increment anything\n              if (identifier === this.prerelease.join('.') && identifierBase === false) {\n                throw new Error('invalid increment argument: identifier already exists');\n              }\n\n              this.prerelease.push(base);\n            }\n          }\n\n          if (identifier) {\n            // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n            // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n            let prerelease = [identifier, base];\n\n            if (identifierBase === false) {\n              prerelease = [identifier];\n            }\n\n            if (compareIdentifiers(this.prerelease[0], identifier) === 0) {\n              if (isNaN(this.prerelease[1])) {\n                this.prerelease = prerelease;\n              }\n            } else {\n              this.prerelease = prerelease;\n            }\n          }\n\n          break;\n        }\n\n      default:\n        throw new Error(`invalid increment argument: ${release}`);\n    }\n\n    this.raw = this.format();\n\n    if (this.build.length) {\n      this.raw += `+${this.build.join('.')}`;\n    }\n\n    return this;\n  }\n\n}\n\nmodule.exports = SemVer;","map":{"version":3,"sources":["/Users/xiuhuiwang/Documents/USF/CS686_CloudComputing/final/mld/node_modules/semver/classes/semver.js"],"names":["debug","require","MAX_LENGTH","MAX_SAFE_INTEGER","safeRe","re","t","parseOptions","compareIdentifiers","SemVer","constructor","version","options","loose","includePrerelease","TypeError","length","m","trim","match","LOOSE","FULL","raw","major","minor","patch","prerelease","split","map","id","test","num","build","format","join","toString","compare","other","compareMain","comparePre","i","a","b","undefined","compareBuild","inc","release","identifier","identifierBase","base","Number","Error","push","isNaN","module","exports"],"mappings":"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","sourcesContent":["const debug = require('../internal/debug')\nconst { MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')\nconst { safeRe: re, t } = require('../internal/re')\n\nconst parseOptions = require('../internal/parse-options')\nconst { compareIdentifiers } = require('../internal/identifiers')\nclass SemVer {\n  constructor (version, options) {\n    options = parseOptions(options)\n\n    if (version instanceof SemVer) {\n      if (version.loose === !!options.loose &&\n          version.includePrerelease === !!options.includePrerelease) {\n        return version\n      } else {\n        version = version.version\n      }\n    } else if (typeof version !== 'string') {\n      throw new TypeError(`Invalid version. Must be a string. Got type \"${typeof version}\".`)\n    }\n\n    if (version.length > MAX_LENGTH) {\n      throw new TypeError(\n        `version is longer than ${MAX_LENGTH} characters`\n      )\n    }\n\n    debug('SemVer', version, options)\n    this.options = options\n    this.loose = !!options.loose\n    // this isn't actually relevant for versions, but keep it so that we\n    // don't run into trouble passing this.options around.\n    this.includePrerelease = !!options.includePrerelease\n\n    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])\n\n    if (!m) {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    this.raw = version\n\n    // these are actually numbers\n    this.major = +m[1]\n    this.minor = +m[2]\n    this.patch = +m[3]\n\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n      throw new TypeError('Invalid major version')\n    }\n\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n      throw new TypeError('Invalid minor version')\n    }\n\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n      throw new TypeError('Invalid patch version')\n    }\n\n    // numberify any prerelease numeric ids\n    if (!m[4]) {\n      this.prerelease = []\n    } else {\n      this.prerelease = m[4].split('.').map((id) => {\n        if (/^[0-9]+$/.test(id)) {\n          const num = +id\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\n            return num\n          }\n        }\n        return id\n      })\n    }\n\n    this.build = m[5] ? m[5].split('.') : []\n    this.format()\n  }\n\n  format () {\n    this.version = `${this.major}.${this.minor}.${this.patch}`\n    if (this.prerelease.length) {\n      this.version += `-${this.prerelease.join('.')}`\n    }\n    return this.version\n  }\n\n  toString () {\n    return this.version\n  }\n\n  compare (other) {\n    debug('SemVer.compare', this.version, this.options, other)\n    if (!(other instanceof SemVer)) {\n      if (typeof other === 'string' && other === this.version) {\n        return 0\n      }\n      other = new SemVer(other, this.options)\n    }\n\n    if (other.version === this.version) {\n      return 0\n    }\n\n    return this.compareMain(other) || this.comparePre(other)\n  }\n\n  compareMain (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    return (\n      compareIdentifiers(this.major, other.major) ||\n      compareIdentifiers(this.minor, other.minor) ||\n      compareIdentifiers(this.patch, other.patch)\n    )\n  }\n\n  comparePre (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    // NOT having a prerelease is > having one\n    if (this.prerelease.length && !other.prerelease.length) {\n      return -1\n    } else if (!this.prerelease.length && other.prerelease.length) {\n      return 1\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n      return 0\n    }\n\n    let i = 0\n    do {\n      const a = this.prerelease[i]\n      const b = other.prerelease[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  compareBuild (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    let i = 0\n    do {\n      const a = this.build[i]\n      const b = other.build[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  // preminor will bump the version up to the next minor release, and immediately\n  // down to pre-release. premajor and prepatch work the same way.\n  inc (release, identifier, identifierBase) {\n    switch (release) {\n      case 'premajor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor = 0\n        this.major++\n        this.inc('pre', identifier, identifierBase)\n        break\n      case 'preminor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor++\n        this.inc('pre', identifier, identifierBase)\n        break\n      case 'prepatch':\n        // If this is already a prerelease, it will bump to the next version\n        // drop any prereleases that might already exist, since they are not\n        // relevant at this point.\n        this.prerelease.length = 0\n        this.inc('patch', identifier, identifierBase)\n        this.inc('pre', identifier, identifierBase)\n        break\n      // If the input is a non-prerelease version, this acts the same as\n      // prepatch.\n      case 'prerelease':\n        if (this.prerelease.length === 0) {\n          this.inc('patch', identifier, identifierBase)\n        }\n        this.inc('pre', identifier, identifierBase)\n        break\n\n      case 'major':\n        // If this is a pre-major version, bump up to the same major version.\n        // Otherwise increment major.\n        // 1.0.0-5 bumps to 1.0.0\n        // 1.1.0 bumps to 2.0.0\n        if (\n          this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0\n        ) {\n          this.major++\n        }\n        this.minor = 0\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'minor':\n        // If this is a pre-minor version, bump up to the same minor version.\n        // Otherwise increment minor.\n        // 1.2.0-5 bumps to 1.2.0\n        // 1.2.1 bumps to 1.3.0\n        if (this.patch !== 0 || this.prerelease.length === 0) {\n          this.minor++\n        }\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'patch':\n        // If this is not a pre-release version, it will increment the patch.\n        // If it is a pre-release it will bump up to the same patch version.\n        // 1.2.0-5 patches to 1.2.0\n        // 1.2.0 patches to 1.2.1\n        if (this.prerelease.length === 0) {\n          this.patch++\n        }\n        this.prerelease = []\n        break\n      // This probably shouldn't be used publicly.\n      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\n      case 'pre': {\n        const base = Number(identifierBase) ? 1 : 0\n\n        if (!identifier && identifierBase === false) {\n          throw new Error('invalid increment argument: identifier is empty')\n        }\n\n        if (this.prerelease.length === 0) {\n          this.prerelease = [base]\n        } else {\n          let i = this.prerelease.length\n          while (--i >= 0) {\n            if (typeof this.prerelease[i] === 'number') {\n              this.prerelease[i]++\n              i = -2\n            }\n          }\n          if (i === -1) {\n            // didn't increment anything\n            if (identifier === this.prerelease.join('.') && identifierBase === false) {\n              throw new Error('invalid increment argument: identifier already exists')\n            }\n            this.prerelease.push(base)\n          }\n        }\n        if (identifier) {\n          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n          let prerelease = [identifier, base]\n          if (identifierBase === false) {\n            prerelease = [identifier]\n          }\n          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {\n            if (isNaN(this.prerelease[1])) {\n              this.prerelease = prerelease\n            }\n          } else {\n            this.prerelease = prerelease\n          }\n        }\n        break\n      }\n      default:\n        throw new Error(`invalid increment argument: ${release}`)\n    }\n    this.raw = this.format()\n    if (this.build.length) {\n      this.raw += `+${this.build.join('.')}`\n    }\n    return this\n  }\n}\n\nmodule.exports = SemVer\n"]},"metadata":{},"sourceType":"script"}