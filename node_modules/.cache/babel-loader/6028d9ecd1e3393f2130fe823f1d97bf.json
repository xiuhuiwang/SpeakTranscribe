{"ast":null,"code":"const ASYMMETRIC_KEY_DETAILS_SUPPORTED = require('./asymmetricKeyDetailsSupported');\n\nconst RSA_PSS_KEY_DETAILS_SUPPORTED = require('./rsaPssKeyDetailsSupported');\n\nconst allowedAlgorithmsForKeys = {\n  'ec': ['ES256', 'ES384', 'ES512'],\n  'rsa': ['RS256', 'PS256', 'RS384', 'PS384', 'RS512', 'PS512'],\n  'rsa-pss': ['PS256', 'PS384', 'PS512']\n};\nconst allowedCurves = {\n  ES256: 'prime256v1',\n  ES384: 'secp384r1',\n  ES512: 'secp521r1'\n};\n\nmodule.exports = function (algorithm, key) {\n  if (!algorithm || !key) return;\n  const keyType = key.asymmetricKeyType;\n  if (!keyType) return;\n  const allowedAlgorithms = allowedAlgorithmsForKeys[keyType];\n\n  if (!allowedAlgorithms) {\n    throw new Error(`Unknown key type \"${keyType}\".`);\n  }\n\n  if (!allowedAlgorithms.includes(algorithm)) {\n    throw new Error(`\"alg\" parameter for \"${keyType}\" key type must be one of: ${allowedAlgorithms.join(', ')}.`);\n  }\n  /*\n   * Ignore the next block from test coverage because it gets executed\n   * conditionally depending on the Node version. Not ignoring it would\n   * prevent us from reaching the target % of coverage for versions of\n   * Node under 15.7.0.\n   */\n\n  /* istanbul ignore next */\n\n\n  if (ASYMMETRIC_KEY_DETAILS_SUPPORTED) {\n    switch (keyType) {\n      case 'ec':\n        const keyCurve = key.asymmetricKeyDetails.namedCurve;\n        const allowedCurve = allowedCurves[algorithm];\n\n        if (keyCurve !== allowedCurve) {\n          throw new Error(`\"alg\" parameter \"${algorithm}\" requires curve \"${allowedCurve}\".`);\n        }\n\n        break;\n\n      case 'rsa-pss':\n        if (RSA_PSS_KEY_DETAILS_SUPPORTED) {\n          const length = parseInt(algorithm.slice(-3), 10);\n          const {\n            hashAlgorithm,\n            mgf1HashAlgorithm,\n            saltLength\n          } = key.asymmetricKeyDetails;\n\n          if (hashAlgorithm !== `sha${length}` || mgf1HashAlgorithm !== hashAlgorithm) {\n            throw new Error(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of \"alg\" ${algorithm}.`);\n          }\n\n          if (saltLength !== undefined && saltLength > length >> 3) {\n            throw new Error(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of \"alg\" ${algorithm}.`);\n          }\n        }\n\n        break;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/xiuhuiwang/Documents/USF/CS686_CloudComputing/final/mld/node_modules/jsonwebtoken/lib/validateAsymmetricKey.js"],"names":["ASYMMETRIC_KEY_DETAILS_SUPPORTED","require","RSA_PSS_KEY_DETAILS_SUPPORTED","allowedAlgorithmsForKeys","allowedCurves","ES256","ES384","ES512","module","exports","algorithm","key","keyType","asymmetricKeyType","allowedAlgorithms","Error","includes","join","keyCurve","asymmetricKeyDetails","namedCurve","allowedCurve","length","parseInt","slice","hashAlgorithm","mgf1HashAlgorithm","saltLength","undefined"],"mappings":"AAAA,MAAMA,gCAAgC,GAAGC,OAAO,CAAC,iCAAD,CAAhD;;AACA,MAAMC,6BAA6B,GAAGD,OAAO,CAAC,6BAAD,CAA7C;;AAEA,MAAME,wBAAwB,GAAG;AAC/B,QAAM,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CADyB;AAE/B,SAAO,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,EAAqC,OAArC,EAA8C,OAA9C,CAFwB;AAG/B,aAAW,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB;AAHoB,CAAjC;AAMA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,KAAK,EAAE,YADa;AAEpBC,EAAAA,KAAK,EAAE,WAFa;AAGpBC,EAAAA,KAAK,EAAE;AAHa,CAAtB;;AAMAC,MAAM,CAACC,OAAP,GAAiB,UAASC,SAAT,EAAoBC,GAApB,EAAyB;AACxC,MAAI,CAACD,SAAD,IAAc,CAACC,GAAnB,EAAwB;AAExB,QAAMC,OAAO,GAAGD,GAAG,CAACE,iBAApB;AACA,MAAI,CAACD,OAAL,EAAc;AAEd,QAAME,iBAAiB,GAAGX,wBAAwB,CAACS,OAAD,CAAlD;;AAEA,MAAI,CAACE,iBAAL,EAAwB;AACtB,UAAM,IAAIC,KAAJ,CAAW,qBAAoBH,OAAQ,IAAvC,CAAN;AACD;;AAED,MAAI,CAACE,iBAAiB,CAACE,QAAlB,CAA2BN,SAA3B,CAAL,EAA4C;AAC1C,UAAM,IAAIK,KAAJ,CAAW,wBAAuBH,OAAQ,8BAA6BE,iBAAiB,CAACG,IAAlB,CAAuB,IAAvB,CAA6B,GAApG,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;AACE;;;AACA,MAAIjB,gCAAJ,EAAsC;AACpC,YAAQY,OAAR;AACA,WAAK,IAAL;AACE,cAAMM,QAAQ,GAAGP,GAAG,CAACQ,oBAAJ,CAAyBC,UAA1C;AACA,cAAMC,YAAY,GAAGjB,aAAa,CAACM,SAAD,CAAlC;;AAEA,YAAIQ,QAAQ,KAAKG,YAAjB,EAA+B;AAC7B,gBAAM,IAAIN,KAAJ,CAAW,oBAAmBL,SAAU,qBAAoBW,YAAa,IAAzE,CAAN;AACD;;AACD;;AAEF,WAAK,SAAL;AACE,YAAInB,6BAAJ,EAAmC;AACjC,gBAAMoB,MAAM,GAAGC,QAAQ,CAACb,SAAS,CAACc,KAAV,CAAgB,CAAC,CAAjB,CAAD,EAAsB,EAAtB,CAAvB;AACA,gBAAM;AAAEC,YAAAA,aAAF;AAAiBC,YAAAA,iBAAjB;AAAoCC,YAAAA;AAApC,cAAmDhB,GAAG,CAACQ,oBAA7D;;AAEA,cAAIM,aAAa,KAAM,MAAKH,MAAO,EAA/B,IAAoCI,iBAAiB,KAAKD,aAA9D,EAA6E;AAC3E,kBAAM,IAAIV,KAAJ,CAAW,gGAA+FL,SAAU,GAApH,CAAN;AACD;;AAED,cAAIiB,UAAU,KAAKC,SAAf,IAA4BD,UAAU,GAAGL,MAAM,IAAI,CAAvD,EAA0D;AACxD,kBAAM,IAAIP,KAAJ,CAAW,4GAA2GL,SAAU,GAAhI,CAAN;AACD;AACF;;AACD;AAvBF;AAyBD;AACF,CAlDD","sourcesContent":["const ASYMMETRIC_KEY_DETAILS_SUPPORTED = require('./asymmetricKeyDetailsSupported');\nconst RSA_PSS_KEY_DETAILS_SUPPORTED = require('./rsaPssKeyDetailsSupported');\n\nconst allowedAlgorithmsForKeys = {\n  'ec': ['ES256', 'ES384', 'ES512'],\n  'rsa': ['RS256', 'PS256', 'RS384', 'PS384', 'RS512', 'PS512'],\n  'rsa-pss': ['PS256', 'PS384', 'PS512']\n};\n\nconst allowedCurves = {\n  ES256: 'prime256v1',\n  ES384: 'secp384r1',\n  ES512: 'secp521r1',\n};\n\nmodule.exports = function(algorithm, key) {\n  if (!algorithm || !key) return;\n\n  const keyType = key.asymmetricKeyType;\n  if (!keyType) return;\n\n  const allowedAlgorithms = allowedAlgorithmsForKeys[keyType];\n\n  if (!allowedAlgorithms) {\n    throw new Error(`Unknown key type \"${keyType}\".`);\n  }\n\n  if (!allowedAlgorithms.includes(algorithm)) {\n    throw new Error(`\"alg\" parameter for \"${keyType}\" key type must be one of: ${allowedAlgorithms.join(', ')}.`)\n  }\n\n  /*\n   * Ignore the next block from test coverage because it gets executed\n   * conditionally depending on the Node version. Not ignoring it would\n   * prevent us from reaching the target % of coverage for versions of\n   * Node under 15.7.0.\n   */\n  /* istanbul ignore next */\n  if (ASYMMETRIC_KEY_DETAILS_SUPPORTED) {\n    switch (keyType) {\n    case 'ec':\n      const keyCurve = key.asymmetricKeyDetails.namedCurve;\n      const allowedCurve = allowedCurves[algorithm];\n\n      if (keyCurve !== allowedCurve) {\n        throw new Error(`\"alg\" parameter \"${algorithm}\" requires curve \"${allowedCurve}\".`);\n      }\n      break;\n\n    case 'rsa-pss':\n      if (RSA_PSS_KEY_DETAILS_SUPPORTED) {\n        const length = parseInt(algorithm.slice(-3), 10);\n        const { hashAlgorithm, mgf1HashAlgorithm, saltLength } = key.asymmetricKeyDetails;\n\n        if (hashAlgorithm !== `sha${length}` || mgf1HashAlgorithm !== hashAlgorithm) {\n          throw new Error(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of \"alg\" ${algorithm}.`);\n        }\n\n        if (saltLength !== undefined && saltLength > length >> 3) {\n          throw new Error(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of \"alg\" ${algorithm}.`)\n        }\n      }\n      break;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}