{"ast":null,"code":"const Range = require('../classes/range.js');\n\nconst Comparator = require('../classes/comparator.js');\n\nconst {\n  ANY\n} = Comparator;\n\nconst satisfies = require('../functions/satisfies.js');\n\nconst compare = require('../functions/compare.js'); // Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\n\n\nconst subset = function (sub, dom) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (sub === dom) {\n    return true;\n  }\n\n  sub = new Range(sub, options);\n  dom = new Range(dom, options);\n  let sawNonNull = false;\n\n  OUTER: for (const simpleSub of sub.set) {\n    for (const simpleDom of dom.set) {\n      const isSub = simpleSubset(simpleSub, simpleDom, options);\n      sawNonNull = sawNonNull || isSub !== null;\n\n      if (isSub) {\n        continue OUTER;\n      }\n    } // the null set is a subset of everything, but null simple ranges in\n    // a complex range should be ignored.  so if we saw a non-null range,\n    // then we know this isn't a subset, but if EVERY simple range was null,\n    // then it is a subset.\n\n\n    if (sawNonNull) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')];\nconst minimumVersion = [new Comparator('>=0.0.0')];\n\nconst simpleSubset = (sub, dom, options) => {\n  if (sub === dom) {\n    return true;\n  }\n\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY) {\n      return true;\n    } else if (options.includePrerelease) {\n      sub = minimumVersionWithPreRelease;\n    } else {\n      sub = minimumVersion;\n    }\n  }\n\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease) {\n      return true;\n    } else {\n      dom = minimumVersion;\n    }\n  }\n\n  const eqSet = new Set();\n  let gt, lt;\n\n  for (const c of sub) {\n    if (c.operator === '>' || c.operator === '>=') {\n      gt = higherGT(gt, c, options);\n    } else if (c.operator === '<' || c.operator === '<=') {\n      lt = lowerLT(lt, c, options);\n    } else {\n      eqSet.add(c.semver);\n    }\n  }\n\n  if (eqSet.size > 1) {\n    return null;\n  }\n\n  let gtltComp;\n\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options);\n\n    if (gtltComp > 0) {\n      return null;\n    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\n      return null;\n    }\n  } // will iterate one or zero times\n\n\n  for (const eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options)) {\n      return null;\n    }\n\n    if (lt && !satisfies(eq, String(lt), options)) {\n      return null;\n    }\n\n    for (const c of dom) {\n      if (!satisfies(eq, String(c), options)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  let higher, lower;\n  let hasDomLT, hasDomGT; // if the subset has a prerelease, we need a comparator in the superset\n  // with the same tuple and a prerelease, or it's not a subset\n\n  let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;\n  let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false; // exception: <1.2.3-0 is the same as <1.2.3\n\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false;\n  }\n\n  for (const c of dom) {\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>=';\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<=';\n\n    if (gt) {\n      if (needDomGTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {\n          needDomGTPre = false;\n        }\n      }\n\n      if (c.operator === '>' || c.operator === '>=') {\n        higher = higherGT(gt, c, options);\n\n        if (higher === c && higher !== gt) {\n          return false;\n        }\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {\n        return false;\n      }\n    }\n\n    if (lt) {\n      if (needDomLTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {\n          needDomLTPre = false;\n        }\n      }\n\n      if (c.operator === '<' || c.operator === '<=') {\n        lower = lowerLT(lt, c, options);\n\n        if (lower === c && lower !== lt) {\n          return false;\n        }\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {\n        return false;\n      }\n    }\n\n    if (!c.operator && (lt || gt) && gtltComp !== 0) {\n      return false;\n    }\n  } // if there was a < or >, and nothing in the dom, then must be false\n  // UNLESS it was limited by another range in the other direction.\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n\n\n  if (gt && hasDomLT && !lt && gtltComp !== 0) {\n    return false;\n  }\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0) {\n    return false;\n  } // we needed a prerelease range in a specific tuple, but didn't get one\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n  // because it includes prereleases in the 1.2.3 tuple\n\n\n  if (needDomGTPre || needDomLTPre) {\n    return false;\n  }\n\n  return true;\n}; // >=1.2.3 is lower than >1.2.3\n\n\nconst higherGT = (a, b, options) => {\n  if (!a) {\n    return b;\n  }\n\n  const comp = compare(a.semver, b.semver, options);\n  return comp > 0 ? a : comp < 0 ? b : b.operator === '>' && a.operator === '>=' ? b : a;\n}; // <=1.2.3 is higher than <1.2.3\n\n\nconst lowerLT = (a, b, options) => {\n  if (!a) {\n    return b;\n  }\n\n  const comp = compare(a.semver, b.semver, options);\n  return comp < 0 ? a : comp > 0 ? b : b.operator === '<' && a.operator === '<=' ? b : a;\n};\n\nmodule.exports = subset;","map":{"version":3,"sources":["/Users/xiuhuiwang/Documents/USF/CS686_CloudComputing/final/mld/node_modules/semver/ranges/subset.js"],"names":["Range","require","Comparator","ANY","satisfies","compare","subset","sub","dom","options","sawNonNull","OUTER","simpleSub","set","simpleDom","isSub","simpleSubset","minimumVersionWithPreRelease","minimumVersion","length","semver","includePrerelease","eqSet","Set","gt","lt","c","operator","higherGT","lowerLT","add","size","gtltComp","eq","String","higher","lower","hasDomLT","hasDomGT","needDomLTPre","prerelease","needDomGTPre","major","minor","patch","a","b","comp","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,qBAAD,CAArB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,0BAAD,CAA1B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAUD,UAAhB;;AACA,MAAME,SAAS,GAAGH,OAAO,CAAC,2BAAD,CAAzB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,yBAAD,CAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMK,MAAM,GAAG,UAACC,GAAD,EAAMC,GAAN,EAA4B;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AACzC,MAAIF,GAAG,KAAKC,GAAZ,EAAiB;AACf,WAAO,IAAP;AACD;;AAEDD,EAAAA,GAAG,GAAG,IAAIP,KAAJ,CAAUO,GAAV,EAAeE,OAAf,CAAN;AACAD,EAAAA,GAAG,GAAG,IAAIR,KAAJ,CAAUQ,GAAV,EAAeC,OAAf,CAAN;AACA,MAAIC,UAAU,GAAG,KAAjB;;AAEAC,EAAAA,KAAK,EAAE,KAAK,MAAMC,SAAX,IAAwBL,GAAG,CAACM,GAA5B,EAAiC;AACtC,SAAK,MAAMC,SAAX,IAAwBN,GAAG,CAACK,GAA5B,EAAiC;AAC/B,YAAME,KAAK,GAAGC,YAAY,CAACJ,SAAD,EAAYE,SAAZ,EAAuBL,OAAvB,CAA1B;AACAC,MAAAA,UAAU,GAAGA,UAAU,IAAIK,KAAK,KAAK,IAArC;;AACA,UAAIA,KAAJ,EAAW;AACT,iBAASJ,KAAT;AACD;AACF,KAPqC,CAQtC;AACA;AACA;AACA;;;AACA,QAAID,UAAJ,EAAgB;AACd,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,CA1BD;;AA4BA,MAAMO,4BAA4B,GAAG,CAAC,IAAIf,UAAJ,CAAe,WAAf,CAAD,CAArC;AACA,MAAMgB,cAAc,GAAG,CAAC,IAAIhB,UAAJ,CAAe,SAAf,CAAD,CAAvB;;AAEA,MAAMc,YAAY,GAAG,CAACT,GAAD,EAAMC,GAAN,EAAWC,OAAX,KAAuB;AAC1C,MAAIF,GAAG,KAAKC,GAAZ,EAAiB;AACf,WAAO,IAAP;AACD;;AAED,MAAID,GAAG,CAACY,MAAJ,KAAe,CAAf,IAAoBZ,GAAG,CAAC,CAAD,CAAH,CAAOa,MAAP,KAAkBjB,GAA1C,EAA+C;AAC7C,QAAIK,GAAG,CAACW,MAAJ,KAAe,CAAf,IAAoBX,GAAG,CAAC,CAAD,CAAH,CAAOY,MAAP,KAAkBjB,GAA1C,EAA+C;AAC7C,aAAO,IAAP;AACD,KAFD,MAEO,IAAIM,OAAO,CAACY,iBAAZ,EAA+B;AACpCd,MAAAA,GAAG,GAAGU,4BAAN;AACD,KAFM,MAEA;AACLV,MAAAA,GAAG,GAAGW,cAAN;AACD;AACF;;AAED,MAAIV,GAAG,CAACW,MAAJ,KAAe,CAAf,IAAoBX,GAAG,CAAC,CAAD,CAAH,CAAOY,MAAP,KAAkBjB,GAA1C,EAA+C;AAC7C,QAAIM,OAAO,CAACY,iBAAZ,EAA+B;AAC7B,aAAO,IAAP;AACD,KAFD,MAEO;AACLb,MAAAA,GAAG,GAAGU,cAAN;AACD;AACF;;AAED,QAAMI,KAAK,GAAG,IAAIC,GAAJ,EAAd;AACA,MAAIC,EAAJ,EAAQC,EAAR;;AACA,OAAK,MAAMC,CAAX,IAAgBnB,GAAhB,EAAqB;AACnB,QAAImB,CAAC,CAACC,QAAF,KAAe,GAAf,IAAsBD,CAAC,CAACC,QAAF,KAAe,IAAzC,EAA+C;AAC7CH,MAAAA,EAAE,GAAGI,QAAQ,CAACJ,EAAD,EAAKE,CAAL,EAAQjB,OAAR,CAAb;AACD,KAFD,MAEO,IAAIiB,CAAC,CAACC,QAAF,KAAe,GAAf,IAAsBD,CAAC,CAACC,QAAF,KAAe,IAAzC,EAA+C;AACpDF,MAAAA,EAAE,GAAGI,OAAO,CAACJ,EAAD,EAAKC,CAAL,EAAQjB,OAAR,CAAZ;AACD,KAFM,MAEA;AACLa,MAAAA,KAAK,CAACQ,GAAN,CAAUJ,CAAC,CAACN,MAAZ;AACD;AACF;;AAED,MAAIE,KAAK,CAACS,IAAN,GAAa,CAAjB,EAAoB;AAClB,WAAO,IAAP;AACD;;AAED,MAAIC,QAAJ;;AACA,MAAIR,EAAE,IAAIC,EAAV,EAAc;AACZO,IAAAA,QAAQ,GAAG3B,OAAO,CAACmB,EAAE,CAACJ,MAAJ,EAAYK,EAAE,CAACL,MAAf,EAAuBX,OAAvB,CAAlB;;AACA,QAAIuB,QAAQ,GAAG,CAAf,EAAkB;AAChB,aAAO,IAAP;AACD,KAFD,MAEO,IAAIA,QAAQ,KAAK,CAAb,KAAmBR,EAAE,CAACG,QAAH,KAAgB,IAAhB,IAAwBF,EAAE,CAACE,QAAH,KAAgB,IAA3D,CAAJ,EAAsE;AAC3E,aAAO,IAAP;AACD;AACF,GA/CyC,CAiD1C;;;AACA,OAAK,MAAMM,EAAX,IAAiBX,KAAjB,EAAwB;AACtB,QAAIE,EAAE,IAAI,CAACpB,SAAS,CAAC6B,EAAD,EAAKC,MAAM,CAACV,EAAD,CAAX,EAAiBf,OAAjB,CAApB,EAA+C;AAC7C,aAAO,IAAP;AACD;;AAED,QAAIgB,EAAE,IAAI,CAACrB,SAAS,CAAC6B,EAAD,EAAKC,MAAM,CAACT,EAAD,CAAX,EAAiBhB,OAAjB,CAApB,EAA+C;AAC7C,aAAO,IAAP;AACD;;AAED,SAAK,MAAMiB,CAAX,IAAgBlB,GAAhB,EAAqB;AACnB,UAAI,CAACJ,SAAS,CAAC6B,EAAD,EAAKC,MAAM,CAACR,CAAD,CAAX,EAAgBjB,OAAhB,CAAd,EAAwC;AACtC,eAAO,KAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD;;AAED,MAAI0B,MAAJ,EAAYC,KAAZ;AACA,MAAIC,QAAJ,EAAcC,QAAd,CArE0C,CAsE1C;AACA;;AACA,MAAIC,YAAY,GAAGd,EAAE,IACnB,CAAChB,OAAO,CAACY,iBADQ,IAEjBI,EAAE,CAACL,MAAH,CAAUoB,UAAV,CAAqBrB,MAFJ,GAEaM,EAAE,CAACL,MAFhB,GAEyB,KAF5C;AAGA,MAAIqB,YAAY,GAAGjB,EAAE,IACnB,CAACf,OAAO,CAACY,iBADQ,IAEjBG,EAAE,CAACJ,MAAH,CAAUoB,UAAV,CAAqBrB,MAFJ,GAEaK,EAAE,CAACJ,MAFhB,GAEyB,KAF5C,CA3E0C,CA8E1C;;AACA,MAAImB,YAAY,IAAIA,YAAY,CAACC,UAAb,CAAwBrB,MAAxB,KAAmC,CAAnD,IACAM,EAAE,CAACE,QAAH,KAAgB,GADhB,IACuBY,YAAY,CAACC,UAAb,CAAwB,CAAxB,MAA+B,CAD1D,EAC6D;AAC3DD,IAAAA,YAAY,GAAG,KAAf;AACD;;AAED,OAAK,MAAMb,CAAX,IAAgBlB,GAAhB,EAAqB;AACnB8B,IAAAA,QAAQ,GAAGA,QAAQ,IAAIZ,CAAC,CAACC,QAAF,KAAe,GAA3B,IAAkCD,CAAC,CAACC,QAAF,KAAe,IAA5D;AACAU,IAAAA,QAAQ,GAAGA,QAAQ,IAAIX,CAAC,CAACC,QAAF,KAAe,GAA3B,IAAkCD,CAAC,CAACC,QAAF,KAAe,IAA5D;;AACA,QAAIH,EAAJ,EAAQ;AACN,UAAIiB,YAAJ,EAAkB;AAChB,YAAIf,CAAC,CAACN,MAAF,CAASoB,UAAT,IAAuBd,CAAC,CAACN,MAAF,CAASoB,UAAT,CAAoBrB,MAA3C,IACAO,CAAC,CAACN,MAAF,CAASsB,KAAT,KAAmBD,YAAY,CAACC,KADhC,IAEAhB,CAAC,CAACN,MAAF,CAASuB,KAAT,KAAmBF,YAAY,CAACE,KAFhC,IAGAjB,CAAC,CAACN,MAAF,CAASwB,KAAT,KAAmBH,YAAY,CAACG,KAHpC,EAG2C;AACzCH,UAAAA,YAAY,GAAG,KAAf;AACD;AACF;;AACD,UAAIf,CAAC,CAACC,QAAF,KAAe,GAAf,IAAsBD,CAAC,CAACC,QAAF,KAAe,IAAzC,EAA+C;AAC7CQ,QAAAA,MAAM,GAAGP,QAAQ,CAACJ,EAAD,EAAKE,CAAL,EAAQjB,OAAR,CAAjB;;AACA,YAAI0B,MAAM,KAAKT,CAAX,IAAgBS,MAAM,KAAKX,EAA/B,EAAmC;AACjC,iBAAO,KAAP;AACD;AACF,OALD,MAKO,IAAIA,EAAE,CAACG,QAAH,KAAgB,IAAhB,IAAwB,CAACvB,SAAS,CAACoB,EAAE,CAACJ,MAAJ,EAAYc,MAAM,CAACR,CAAD,CAAlB,EAAuBjB,OAAvB,CAAtC,EAAuE;AAC5E,eAAO,KAAP;AACD;AACF;;AACD,QAAIgB,EAAJ,EAAQ;AACN,UAAIc,YAAJ,EAAkB;AAChB,YAAIb,CAAC,CAACN,MAAF,CAASoB,UAAT,IAAuBd,CAAC,CAACN,MAAF,CAASoB,UAAT,CAAoBrB,MAA3C,IACAO,CAAC,CAACN,MAAF,CAASsB,KAAT,KAAmBH,YAAY,CAACG,KADhC,IAEAhB,CAAC,CAACN,MAAF,CAASuB,KAAT,KAAmBJ,YAAY,CAACI,KAFhC,IAGAjB,CAAC,CAACN,MAAF,CAASwB,KAAT,KAAmBL,YAAY,CAACK,KAHpC,EAG2C;AACzCL,UAAAA,YAAY,GAAG,KAAf;AACD;AACF;;AACD,UAAIb,CAAC,CAACC,QAAF,KAAe,GAAf,IAAsBD,CAAC,CAACC,QAAF,KAAe,IAAzC,EAA+C;AAC7CS,QAAAA,KAAK,GAAGP,OAAO,CAACJ,EAAD,EAAKC,CAAL,EAAQjB,OAAR,CAAf;;AACA,YAAI2B,KAAK,KAAKV,CAAV,IAAeU,KAAK,KAAKX,EAA7B,EAAiC;AAC/B,iBAAO,KAAP;AACD;AACF,OALD,MAKO,IAAIA,EAAE,CAACE,QAAH,KAAgB,IAAhB,IAAwB,CAACvB,SAAS,CAACqB,EAAE,CAACL,MAAJ,EAAYc,MAAM,CAACR,CAAD,CAAlB,EAAuBjB,OAAvB,CAAtC,EAAuE;AAC5E,eAAO,KAAP;AACD;AACF;;AACD,QAAI,CAACiB,CAAC,CAACC,QAAH,KAAgBF,EAAE,IAAID,EAAtB,KAA6BQ,QAAQ,KAAK,CAA9C,EAAiD;AAC/C,aAAO,KAAP;AACD;AACF,GA9HyC,CAgI1C;AACA;AACA;;;AACA,MAAIR,EAAE,IAAIa,QAAN,IAAkB,CAACZ,EAAnB,IAAyBO,QAAQ,KAAK,CAA1C,EAA6C;AAC3C,WAAO,KAAP;AACD;;AAED,MAAIP,EAAE,IAAIa,QAAN,IAAkB,CAACd,EAAnB,IAAyBQ,QAAQ,KAAK,CAA1C,EAA6C;AAC3C,WAAO,KAAP;AACD,GAzIyC,CA2I1C;AACA;AACA;;;AACA,MAAIS,YAAY,IAAIF,YAApB,EAAkC;AAChC,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD,CAnJD,C,CAqJA;;;AACA,MAAMX,QAAQ,GAAG,CAACiB,CAAD,EAAIC,CAAJ,EAAOrC,OAAP,KAAmB;AAClC,MAAI,CAACoC,CAAL,EAAQ;AACN,WAAOC,CAAP;AACD;;AACD,QAAMC,IAAI,GAAG1C,OAAO,CAACwC,CAAC,CAACzB,MAAH,EAAW0B,CAAC,CAAC1B,MAAb,EAAqBX,OAArB,CAApB;AACA,SAAOsC,IAAI,GAAG,CAAP,GAAWF,CAAX,GACHE,IAAI,GAAG,CAAP,GAAWD,CAAX,GACAA,CAAC,CAACnB,QAAF,KAAe,GAAf,IAAsBkB,CAAC,CAAClB,QAAF,KAAe,IAArC,GAA4CmB,CAA5C,GACAD,CAHJ;AAID,CATD,C,CAWA;;;AACA,MAAMhB,OAAO,GAAG,CAACgB,CAAD,EAAIC,CAAJ,EAAOrC,OAAP,KAAmB;AACjC,MAAI,CAACoC,CAAL,EAAQ;AACN,WAAOC,CAAP;AACD;;AACD,QAAMC,IAAI,GAAG1C,OAAO,CAACwC,CAAC,CAACzB,MAAH,EAAW0B,CAAC,CAAC1B,MAAb,EAAqBX,OAArB,CAApB;AACA,SAAOsC,IAAI,GAAG,CAAP,GAAWF,CAAX,GACHE,IAAI,GAAG,CAAP,GAAWD,CAAX,GACAA,CAAC,CAACnB,QAAF,KAAe,GAAf,IAAsBkB,CAAC,CAAClB,QAAF,KAAe,IAArC,GAA4CmB,CAA5C,GACAD,CAHJ;AAID,CATD;;AAWAG,MAAM,CAACC,OAAP,GAAiB3C,MAAjB","sourcesContent":["const Range = require('../classes/range.js')\nconst Comparator = require('../classes/comparator.js')\nconst { ANY } = Comparator\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\n\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\n\nconst subset = (sub, dom, options = {}) => {\n  if (sub === dom) {\n    return true\n  }\n\n  sub = new Range(sub, options)\n  dom = new Range(dom, options)\n  let sawNonNull = false\n\n  OUTER: for (const simpleSub of sub.set) {\n    for (const simpleDom of dom.set) {\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\n      sawNonNull = sawNonNull || isSub !== null\n      if (isSub) {\n        continue OUTER\n      }\n    }\n    // the null set is a subset of everything, but null simple ranges in\n    // a complex range should be ignored.  so if we saw a non-null range,\n    // then we know this isn't a subset, but if EVERY simple range was null,\n    // then it is a subset.\n    if (sawNonNull) {\n      return false\n    }\n  }\n  return true\n}\n\nconst minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')]\nconst minimumVersion = [new Comparator('>=0.0.0')]\n\nconst simpleSubset = (sub, dom, options) => {\n  if (sub === dom) {\n    return true\n  }\n\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY) {\n      return true\n    } else if (options.includePrerelease) {\n      sub = minimumVersionWithPreRelease\n    } else {\n      sub = minimumVersion\n    }\n  }\n\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease) {\n      return true\n    } else {\n      dom = minimumVersion\n    }\n  }\n\n  const eqSet = new Set()\n  let gt, lt\n  for (const c of sub) {\n    if (c.operator === '>' || c.operator === '>=') {\n      gt = higherGT(gt, c, options)\n    } else if (c.operator === '<' || c.operator === '<=') {\n      lt = lowerLT(lt, c, options)\n    } else {\n      eqSet.add(c.semver)\n    }\n  }\n\n  if (eqSet.size > 1) {\n    return null\n  }\n\n  let gtltComp\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options)\n    if (gtltComp > 0) {\n      return null\n    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\n      return null\n    }\n  }\n\n  // will iterate one or zero times\n  for (const eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options)) {\n      return null\n    }\n\n    if (lt && !satisfies(eq, String(lt), options)) {\n      return null\n    }\n\n    for (const c of dom) {\n      if (!satisfies(eq, String(c), options)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  let higher, lower\n  let hasDomLT, hasDomGT\n  // if the subset has a prerelease, we need a comparator in the superset\n  // with the same tuple and a prerelease, or it's not a subset\n  let needDomLTPre = lt &&\n    !options.includePrerelease &&\n    lt.semver.prerelease.length ? lt.semver : false\n  let needDomGTPre = gt &&\n    !options.includePrerelease &&\n    gt.semver.prerelease.length ? gt.semver : false\n  // exception: <1.2.3-0 is the same as <1.2.3\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&\n      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false\n  }\n\n  for (const c of dom) {\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\n    if (gt) {\n      if (needDomGTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomGTPre.major &&\n            c.semver.minor === needDomGTPre.minor &&\n            c.semver.patch === needDomGTPre.patch) {\n          needDomGTPre = false\n        }\n      }\n      if (c.operator === '>' || c.operator === '>=') {\n        higher = higherGT(gt, c, options)\n        if (higher === c && higher !== gt) {\n          return false\n        }\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (lt) {\n      if (needDomLTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomLTPre.major &&\n            c.semver.minor === needDomLTPre.minor &&\n            c.semver.patch === needDomLTPre.patch) {\n          needDomLTPre = false\n        }\n      }\n      if (c.operator === '<' || c.operator === '<=') {\n        lower = lowerLT(lt, c, options)\n        if (lower === c && lower !== lt) {\n          return false\n        }\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (!c.operator && (lt || gt) && gtltComp !== 0) {\n      return false\n    }\n  }\n\n  // if there was a < or >, and nothing in the dom, then must be false\n  // UNLESS it was limited by another range in the other direction.\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n  if (gt && hasDomLT && !lt && gtltComp !== 0) {\n    return false\n  }\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0) {\n    return false\n  }\n\n  // we needed a prerelease range in a specific tuple, but didn't get one\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n  // because it includes prereleases in the 1.2.3 tuple\n  if (needDomGTPre || needDomLTPre) {\n    return false\n  }\n\n  return true\n}\n\n// >=1.2.3 is lower than >1.2.3\nconst higherGT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp > 0 ? a\n    : comp < 0 ? b\n    : b.operator === '>' && a.operator === '>=' ? b\n    : a\n}\n\n// <=1.2.3 is higher than <1.2.3\nconst lowerLT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp < 0 ? a\n    : comp > 0 ? b\n    : b.operator === '<' && a.operator === '<=' ? b\n    : a\n}\n\nmodule.exports = subset\n"]},"metadata":{},"sourceType":"script"}