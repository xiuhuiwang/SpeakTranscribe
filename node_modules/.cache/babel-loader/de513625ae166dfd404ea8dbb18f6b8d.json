{"ast":null,"code":"const {\n  MAX_SAFE_COMPONENT_LENGTH,\n  MAX_SAFE_BUILD_LENGTH,\n  MAX_LENGTH\n} = require('./constants');\n\nconst debug = require('./debug');\n\nexports = module.exports = {}; // The actual regexps go on exports.re\n\nconst re = exports.re = [];\nconst safeRe = exports.safeRe = [];\nconst src = exports.src = [];\nconst t = exports.t = {};\nlet R = 0;\nconst LETTERDASHNUMBER = '[a-zA-Z0-9-]'; // Replace some greedy regex tokens to prevent regex dos issues. These regex are\n// used internally via the safeRe object since all inputs in this library get\n// normalized first to trim and collapse all extra whitespace. The original\n// regexes are exported for userland consumption and lower level usage. A\n// future breaking change could export the safer regex only with a note that\n// all input should have extra whitespace removed.\n\nconst safeRegexReplacements = [['\\\\s', 1], ['\\\\d', MAX_LENGTH], [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]];\n\nconst makeSafeRegex = value => {\n  for (const [token, max] of safeRegexReplacements) {\n    value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);\n  }\n\n  return value;\n};\n\nconst createToken = (name, value, isGlobal) => {\n  const safe = makeSafeRegex(value);\n  const index = R++;\n  debug(name, index, value);\n  t[name] = index;\n  src[index] = value;\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined);\n  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined);\n}; // The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*');\ncreateToken('NUMERICIDENTIFIERLOOSE', '\\\\d+'); // ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', `\\\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`); // ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` + `(${src[t.NUMERICIDENTIFIER]})\\\\.` + `(${src[t.NUMERICIDENTIFIER]})`);\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})`); // ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`); // ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`);\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`); // ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`); // ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`); // ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`); // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\n\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`);\ncreateToken('GTLT', '((?:<|>)?=?)'); // Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\n\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`);\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`);\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` + `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?` + `)?)?`);\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?` + `)?)?`);\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`);\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`); // Coercion.\n// Extract anything that could conceivably be a part of a valid semver\n\ncreateToken('COERCE', `${'(^|[^\\\\d])' + '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` + `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:$|[^\\\\d])`);\ncreateToken('COERCERTL', src[t.COERCE], true); // Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\n\ncreateToken('LONETILDE', '(?:~>?)');\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true);\nexports.tildeTrimReplace = '$1~';\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`); // Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\n\ncreateToken('LONECARET', '(?:\\\\^)');\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true);\nexports.caretTrimReplace = '$1^';\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`); // A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\n\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`);\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`); // An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\n\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);\nexports.comparatorTrimReplace = '$1$2$3'; // Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\n\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` + `\\\\s+-\\\\s+` + `(${src[t.XRANGEPLAIN]})` + `\\\\s*$`);\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` + `\\\\s+-\\\\s+` + `(${src[t.XRANGEPLAINLOOSE]})` + `\\\\s*$`); // Star ranges basically just allow anything at all.\n\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*'); // >=0.0.0 is like a star\n\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$');\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$');","map":{"version":3,"sources":["/Users/xiuhuiwang/Documents/USF/CS686_CloudComputing/final/mld/node_modules/semver/internal/re.js"],"names":["MAX_SAFE_COMPONENT_LENGTH","MAX_SAFE_BUILD_LENGTH","MAX_LENGTH","require","debug","exports","module","re","safeRe","src","t","R","LETTERDASHNUMBER","safeRegexReplacements","makeSafeRegex","value","token","max","split","join","createToken","name","isGlobal","safe","index","RegExp","undefined","NUMERICIDENTIFIER","NUMERICIDENTIFIERLOOSE","NONNUMERICIDENTIFIER","PRERELEASEIDENTIFIER","PRERELEASEIDENTIFIERLOOSE","BUILDIDENTIFIER","MAINVERSION","PRERELEASE","BUILD","FULLPLAIN","MAINVERSIONLOOSE","PRERELEASELOOSE","LOOSEPLAIN","XRANGEIDENTIFIER","XRANGEIDENTIFIERLOOSE","GTLT","XRANGEPLAIN","XRANGEPLAINLOOSE","COERCE","LONETILDE","tildeTrimReplace","LONECARET","caretTrimReplace","comparatorTrimReplace"],"mappings":"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","sourcesContent":["const {\n  MAX_SAFE_COMPONENT_LENGTH,\n  MAX_SAFE_BUILD_LENGTH,\n  MAX_LENGTH,\n} = require('./constants')\nconst debug = require('./debug')\nexports = module.exports = {}\n\n// The actual regexps go on exports.re\nconst re = exports.re = []\nconst safeRe = exports.safeRe = []\nconst src = exports.src = []\nconst t = exports.t = {}\nlet R = 0\n\nconst LETTERDASHNUMBER = '[a-zA-Z0-9-]'\n\n// Replace some greedy regex tokens to prevent regex dos issues. These regex are\n// used internally via the safeRe object since all inputs in this library get\n// normalized first to trim and collapse all extra whitespace. The original\n// regexes are exported for userland consumption and lower level usage. A\n// future breaking change could export the safer regex only with a note that\n// all input should have extra whitespace removed.\nconst safeRegexReplacements = [\n  ['\\\\s', 1],\n  ['\\\\d', MAX_LENGTH],\n  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],\n]\n\nconst makeSafeRegex = (value) => {\n  for (const [token, max] of safeRegexReplacements) {\n    value = value\n      .split(`${token}*`).join(`${token}{0,${max}}`)\n      .split(`${token}+`).join(`${token}{1,${max}}`)\n  }\n  return value\n}\n\nconst createToken = (name, value, isGlobal) => {\n  const safe = makeSafeRegex(value)\n  const index = R++\n  debug(name, index, value)\n  t[name] = index\n  src[index] = value\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\n  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\ncreateToken('NUMERICIDENTIFIERLOOSE', '\\\\d+')\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', `\\\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})`)\n\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\n\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n}${src[t.PRERELEASE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n}${src[t.PRERELEASELOOSE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\n\ncreateToken('GTLT', '((?:<|>)?=?)')\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\n\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:${src[t.PRERELEASE]})?${\n                     src[t.BUILD]}?` +\n                   `)?)?`)\n\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:${src[t.PRERELEASELOOSE]})?${\n                          src[t.BUILD]}?` +\n                        `)?)?`)\n\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCE', `${'(^|[^\\\\d])' +\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:$|[^\\\\d])`)\ncreateToken('COERCERTL', src[t.COERCE], true)\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE', '(?:~>?)')\n\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\nexports.tildeTrimReplace = '$1~'\n\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET', '(?:\\\\^)')\n\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\nexports.caretTrimReplace = '$1^'\n\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\nexports.comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s+-\\\\s+` +\n                   `(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s*$`)\n\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s+-\\\\s+` +\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s*$`)\n\n// Star ranges basically just allow anything at all.\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\n// >=0.0.0 is like a star\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$')\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$')\n"]},"metadata":{},"sourceType":"script"}