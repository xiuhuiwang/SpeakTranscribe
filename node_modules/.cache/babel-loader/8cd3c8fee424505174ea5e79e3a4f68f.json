{"ast":null,"code":"const ANY = Symbol('SemVer ANY'); // hoisted class for cyclic dependency\n\nclass Comparator {\n  static get ANY() {\n    return ANY;\n  }\n\n  constructor(comp, options) {\n    options = parseOptions(options);\n\n    if (comp instanceof Comparator) {\n      if (comp.loose === !!options.loose) {\n        return comp;\n      } else {\n        comp = comp.value;\n      }\n    }\n\n    comp = comp.trim().split(/\\s+/).join(' ');\n    debug('comparator', comp, options);\n    this.options = options;\n    this.loose = !!options.loose;\n    this.parse(comp);\n\n    if (this.semver === ANY) {\n      this.value = '';\n    } else {\n      this.value = this.operator + this.semver.version;\n    }\n\n    debug('comp', this);\n  }\n\n  parse(comp) {\n    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];\n    const m = comp.match(r);\n\n    if (!m) {\n      throw new TypeError(`Invalid comparator: ${comp}`);\n    }\n\n    this.operator = m[1] !== undefined ? m[1] : '';\n\n    if (this.operator === '=') {\n      this.operator = '';\n    } // if it literally is just '>' or '' then allow anything.\n\n\n    if (!m[2]) {\n      this.semver = ANY;\n    } else {\n      this.semver = new SemVer(m[2], this.options.loose);\n    }\n  }\n\n  toString() {\n    return this.value;\n  }\n\n  test(version) {\n    debug('Comparator.test', version, this.options.loose);\n\n    if (this.semver === ANY || version === ANY) {\n      return true;\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options);\n      } catch (er) {\n        return false;\n      }\n    }\n\n    return cmp(version, this.operator, this.semver, this.options);\n  }\n\n  intersects(comp, options) {\n    if (!(comp instanceof Comparator)) {\n      throw new TypeError('a Comparator is required');\n    }\n\n    if (this.operator === '') {\n      if (this.value === '') {\n        return true;\n      }\n\n      return new Range(comp.value, options).test(this.value);\n    } else if (comp.operator === '') {\n      if (comp.value === '') {\n        return true;\n      }\n\n      return new Range(this.value, options).test(comp.semver);\n    }\n\n    options = parseOptions(options); // Special cases where nothing can possibly be lower\n\n    if (options.includePrerelease && (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {\n      return false;\n    }\n\n    if (!options.includePrerelease && (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {\n      return false;\n    } // Same direction increasing (> or >=)\n\n\n    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {\n      return true;\n    } // Same direction decreasing (< or <=)\n\n\n    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {\n      return true;\n    } // same SemVer and both sides are inclusive (<= or >=)\n\n\n    if (this.semver.version === comp.semver.version && this.operator.includes('=') && comp.operator.includes('=')) {\n      return true;\n    } // opposite directions less than\n\n\n    if (cmp(this.semver, '<', comp.semver, options) && this.operator.startsWith('>') && comp.operator.startsWith('<')) {\n      return true;\n    } // opposite directions greater than\n\n\n    if (cmp(this.semver, '>', comp.semver, options) && this.operator.startsWith('<') && comp.operator.startsWith('>')) {\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nmodule.exports = Comparator;\n\nconst parseOptions = require('../internal/parse-options');\n\nconst {\n  safeRe: re,\n  t\n} = require('../internal/re');\n\nconst cmp = require('../functions/cmp');\n\nconst debug = require('../internal/debug');\n\nconst SemVer = require('./semver');\n\nconst Range = require('./range');","map":{"version":3,"sources":["/Users/xiuhuiwang/Documents/USF/CS686_CloudComputing/final/mld/node_modules/semver/classes/comparator.js"],"names":["ANY","Symbol","Comparator","constructor","comp","options","parseOptions","loose","value","trim","split","join","debug","parse","semver","operator","version","r","re","t","COMPARATORLOOSE","COMPARATOR","m","match","TypeError","undefined","SemVer","toString","test","er","cmp","intersects","Range","includePrerelease","startsWith","includes","module","exports","require","safeRe"],"mappings":"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","sourcesContent":["const ANY = Symbol('SemVer ANY')\n// hoisted class for cyclic dependency\nclass Comparator {\n  static get ANY () {\n    return ANY\n  }\n\n  constructor (comp, options) {\n    options = parseOptions(options)\n\n    if (comp instanceof Comparator) {\n      if (comp.loose === !!options.loose) {\n        return comp\n      } else {\n        comp = comp.value\n      }\n    }\n\n    comp = comp.trim().split(/\\s+/).join(' ')\n    debug('comparator', comp, options)\n    this.options = options\n    this.loose = !!options.loose\n    this.parse(comp)\n\n    if (this.semver === ANY) {\n      this.value = ''\n    } else {\n      this.value = this.operator + this.semver.version\n    }\n\n    debug('comp', this)\n  }\n\n  parse (comp) {\n    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\n    const m = comp.match(r)\n\n    if (!m) {\n      throw new TypeError(`Invalid comparator: ${comp}`)\n    }\n\n    this.operator = m[1] !== undefined ? m[1] : ''\n    if (this.operator === '=') {\n      this.operator = ''\n    }\n\n    // if it literally is just '>' or '' then allow anything.\n    if (!m[2]) {\n      this.semver = ANY\n    } else {\n      this.semver = new SemVer(m[2], this.options.loose)\n    }\n  }\n\n  toString () {\n    return this.value\n  }\n\n  test (version) {\n    debug('Comparator.test', version, this.options.loose)\n\n    if (this.semver === ANY || version === ANY) {\n      return true\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    return cmp(version, this.operator, this.semver, this.options)\n  }\n\n  intersects (comp, options) {\n    if (!(comp instanceof Comparator)) {\n      throw new TypeError('a Comparator is required')\n    }\n\n    if (this.operator === '') {\n      if (this.value === '') {\n        return true\n      }\n      return new Range(comp.value, options).test(this.value)\n    } else if (comp.operator === '') {\n      if (comp.value === '') {\n        return true\n      }\n      return new Range(this.value, options).test(comp.semver)\n    }\n\n    options = parseOptions(options)\n\n    // Special cases where nothing can possibly be lower\n    if (options.includePrerelease &&\n      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {\n      return false\n    }\n    if (!options.includePrerelease &&\n      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {\n      return false\n    }\n\n    // Same direction increasing (> or >=)\n    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {\n      return true\n    }\n    // Same direction decreasing (< or <=)\n    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {\n      return true\n    }\n    // same SemVer and both sides are inclusive (<= or >=)\n    if (\n      (this.semver.version === comp.semver.version) &&\n      this.operator.includes('=') && comp.operator.includes('=')) {\n      return true\n    }\n    // opposite directions less than\n    if (cmp(this.semver, '<', comp.semver, options) &&\n      this.operator.startsWith('>') && comp.operator.startsWith('<')) {\n      return true\n    }\n    // opposite directions greater than\n    if (cmp(this.semver, '>', comp.semver, options) &&\n      this.operator.startsWith('<') && comp.operator.startsWith('>')) {\n      return true\n    }\n    return false\n  }\n}\n\nmodule.exports = Comparator\n\nconst parseOptions = require('../internal/parse-options')\nconst { safeRe: re, t } = require('../internal/re')\nconst cmp = require('../functions/cmp')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst Range = require('./range')\n"]},"metadata":{},"sourceType":"script"}